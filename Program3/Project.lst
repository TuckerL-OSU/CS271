Microsoft (R) Macro Assembler Version 14.10.25017.0	    02/09/18 13:43:58
2Integer Accumulator     (IntAccu-TuckerLavell.asm	     Page 1 - 1


				TITLE Integer Accumulator     (IntAccu-TuckerLavell.asm)

				; Author: Tucker Lavell
				; Course / Project ID: Program #3    Date: 02/07/18
				; Description: This program will ask the user for their name and store it.
				;	It will then ask the user to enter numbers between -1 and -100. 
				; 	Any other input is used to end user input, and calculate/display 
				;	the sum and avgerage of the users inputs. It will also tell the user
				;	if they are quitting without entering any valid numbers

				;***************************** OUTLINE ****************************************
				;*	Introduction:
				;*		introduction:
				;*			-introduce program/creator
				;*			-ask users name, and store it
				;*		userInstructions:
				;*			-tell the user to enter a number between -100 and -1
				;*			-tell the user to enter a non negative number to finish input
				;*
				;*	Input:
				;*		getUserData:
				;*			-increment the number of inputs (EC1)
				;*			-tell the user to enter number #(numInputs)
				;*			-jmp to inputValidation
				;*				*NOTE: inputValidation is done BEFORE the input is stored
				;*		inputValidation:
				;*			-check if the input is greater than -1
				;*				*NOTE: do this first because there is no need for anything
				;*					else if they want to quit
				;*				*if it is greater than 1, calculate the average
				;*			-check if the input is less than -100
				;*				*if it is less than -100 jump to outOfRange
				;*			-if it passed both tests store the input
				;*				*calculate the summation
				;*		outOfRange:
				;*			-if the number was less than -100
				;*			-decrement numInputs
				;*				*NOTE: was not valid input so it wasn't added
				;*			-tell the user their input was out of range
				;*			-show the user the range again
				;*			-call getUserData again
				;*
				;*	Calculations:
				;*		summation:
				;*			-move sum to eax
				;*				*NOTE: sum is a running total of the users inputs
				;*			-add the input to eax
				;*			-move the new value in eax back to sum
				;*			-jump back to getUserData to get the next number
				;*		average:
				;*			-decrement number of inputs, because we didn't add one
				;*			-prime the edx register to accept the remainder after division
				;*			-move sum to eax
				;*			-move numInputs to ebx
				;*			-check if numInputs is 0
				;*				*if it is, jump to emptyDisplay
				;*			-if numInputs is greater than 0
				;*			-use cdq to allow the eax sign bit to extend into edx
				;*				*because we are about to divide signed numbers
				;*			-use idiv to divide eax(sum) by ebx(numInputs)
				;*			-the new value in eax is moved to avg
				;*			-the remainder is moved from edx to rem
				;*			-jump to display
				;*
				;*	Print:
				;*		display:
				;*			-tell the user the number of valid numbers they entered
				;*			-tell the user the sum that was calculated from their inputs
				;*			-tell the user the rounded average that was calculated
				;*			-call farewell
				;*		emptyDisplay:
				;*			-tell the user they are exiting without doing anything
				;*				*NOTE: this is only seen if the user inputs a number greater
				;*					than -1 before adding any valid numbers
				;*			-call farewell
				;*		farewell:
				;*			-tell the user goodBye using the name they entered earlier
				;***************************** END OUTLINE ************************************


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.const
				;constants
 =-00000064			LIMIT EQU -100
 = 00000064			INPUT_BUFFER EQU 100

 00000000			.data
 00000000 49 6E 74 65 67	prog_name	BYTE "Integer Accumulator	", 0
	   65 72 20 41 63
	   63 75 6D 75 6C
	   61 74 6F 72 09
	   00
 00000015 62 79 20 54 75	whoBy		BYTE "by Tucker Lavell", 0
	   63 6B 65 72 20
	   4C 61 76 65 6C
	   6C 00
 00000026 54 68 61 6E 6B	thanks		BYTE "Thank you for playing Integer Accumulator! ", 0
	   20 79 6F 75 20
	   66 6F 72 20 70
	   6C 61 79 69 6E
	   67 20 49 6E 74
	   65 67 65 72 20
	   41 63 63 75 6D
	   75 6C 61 74 6F
	   72 21 20 00
 00000052 49 74 27 73 20	goodBye		BYTE "It's been a pleasure to meet you, ", 0
	   62 65 65 6E 20
	   61 20 70 6C 65
	   61 73 75 72 65
	   20 74 6F 20 6D
	   65 65 74 20 79
	   6F 75 2C 20 00

 00000075 57 68 61 74 20	ask_userName	BYTE "What is your name? ", 0
	   69 73 20 79 6F
	   75 72 20 6E 61
	   6D 65 3F 20 00
 00000089 48 65 6C 6C 6F	hello			BYTE "Hello, ", 0
	   2C 20 00
 00000091  00000065 [		userName		BYTE INPUT_BUFFER + 1 DUP(?) ; leaves room for null
	    00
	   ]

 000000F6 50 6C 65 61 73	instruction_1	BYTE "Please enter numbers from -100 to -1, inclusive.", 0
	   65 20 65 6E 74
	   65 72 20 6E 75
	   6D 62 65 72 73
	   20 66 72 6F 6D
	   20 2D 31 30 30
	   20 74 6F 20 2D
	   31 2C 20 69 6E
	   63 6C 75 73 69
	   76 65 2E 00
 00000127 45 6E 74 65 72	instruction_2	BYTE "Enter a non-negative number when you are finished to see results.", 0
	   20 61 20 6E 6F
	   6E 2D 6E 65 67
	   61 74 69 76 65
	   20 6E 75 6D 62
	   65 72 20 77 68
	   65 6E 20 79 6F
	   75 20 61 72 65
	   20 66 69 6E 69
	   73 68 65 64 20
	   74 6F 20 73 65
	   65 20 72 65 73
	   75 6C 74 73 2E
	   00
 00000169 2E 20 45 6E 74	enter_Num		BYTE ". Enter number: ", 0
	   65 72 20 6E 75
	   6D 62 65 72 3A
	   20 00
 0000017A 59 6F 75 20 65	you_Entered		BYTE "You entered ", 0
	   6E 74 65 72 65
	   64 20 00
 00000187 20 76 61 6C 69	valid_Nums		BYTE " valid numbers.", 0
	   64 20 6E 75 6D
	   62 65 72 73 2E
	   00
 00000197 59 6F 75 20 61	entered_Nothing BYTE "You are quitting without doing anything!", 0
	   72 65 20 71 75
	   69 74 74 69 6E
	   67 20 77 69 74
	   68 6F 75 74 20
	   64 6F 69 6E 67
	   20 61 6E 79 74
	   68 69 6E 67 21
	   00
 000001C0 00000000		numInputs		SDWORD 0
 000001C4 00000000		input			SDWORD 0
 000001C8 54 68 61 74 20	oOR_input		BYTE "That number is out of range! ", 0
	   6E 75 6D 62 65
	   72 20 69 73 20
	   6F 75 74 20 6F
	   66 20 72 61 6E
	   67 65 21 20 00
 000001E6 54 68 65 20 73	the_Sum			BYTE "The sum is: ", 0
	   75 6D 20 69 73
	   3A 20 00
 000001F3 54 68 65 20 72	the_Avg			BYTE "The rounded average is: ", 0
	   6F 75 6E 64 65
	   64 20 61 76 65
	   72 61 67 65 20
	   69 73 3A 20 00
 0000020C 00000000		sum				SDWORD 0
 00000210 00000000		avg				SDWORD 0
 00000214 00000000		rem				SDWORD 0
 00000218 FFFFFFFF		UPPER_LIMIT		SDWORD (LIMIT + 99)
 0000021C FFFFFF9C		LOWER_LIMIT	 	SDWORD LIMIT

 00000220 2A 2A 45 43 31	EC1		BYTE "**EC1: Number the lines during user input.", 0
	   3A 20 4E 75 6D
	   62 65 72 20 74
	   68 65 20 6C 69
	   6E 65 73 20 64
	   75 72 69 6E 67
	   20 75 73 65 72
	   20 69 6E 70 75
	   74 2E 00

 00000000			.code
 00000000			main PROC
				;**** Introduction ****
				; Introduce program
 00000000			introduction:
 00000000  BA 00000000 R		mov		edx, OFFSET prog_name
 00000005  E8 00000000 E		call	WriteString

				; Introduce author
 0000000A  BA 00000015 R		mov 	edx, OFFSET whoBy
 0000000F  E8 00000000 E		call 	WriteString
 00000014  E8 00000000 E		call 	CrLf
					
 00000019  BA 00000220 R		mov		edx, OFFSET EC1
 0000001E  E8 00000000 E		call	WriteString
 00000023  E8 00000000 E		call 	CrLf

 00000028  E8 00000000 E		call	CrLf
					
				; Ask users name
 0000002D  BA 00000075 R		mov		edx, OFFSET ask_userName
 00000032  E8 00000000 E		call	WriteString
 00000037  BA 00000091 R		mov		edx, OFFSET userName
 0000003C  B9 00000064			mov		ecx, INPUT_BUFFER
 00000041  E8 00000000 E		call	ReadString
 00000046  BA 00000089 R		mov		edx, OFFSET	hello
 0000004B  E8 00000000 E		call	WriteString
 00000050  BA 00000091 R		mov		edx, OFFSET userName
 00000055  E8 00000000 E		call 	WriteString
 0000005A  E8 00000000 E		call	CrLf

				; Instructions
 0000005F			userInstructions:
 0000005F  BA 000000F6 R		mov		edx, OFFSET instruction_1
 00000064  E8 00000000 E		call	WriteString
 00000069  E8 00000000 E		call	CrLf
 0000006E  BA 00000127 R		mov		edx, OFFSET instruction_2
 00000073  E8 00000000 E		call	WriteString
 00000078  E8 00000000 E		call	CrLf
					
				;**** Input ****
				; Get terms
 0000007D			getUserData:
 0000007D  FF 05 000001C0 R		inc		numInputs
 00000083  A1 000001C0 R		mov		eax, numInputs
 00000088  E8 00000000 E		call	WriteDec
 0000008D  BA 00000169 R		mov		edx, OFFSET enter_Num
 00000092  E8 00000000 E		call	WriteString
 00000097  E8 00000000 E		call	ReadInt
 0000009C  EB 00			jmp		inputValidation

				; Input validation
 0000009E			inputValidation:
 0000009E  3B 05 00000218 R		cmp		eax, UPPER_LIMIT
 000000A4  7F 45			jg		average ; only want the average once the user wants to break
 000000A6  3B 05 0000021C R		cmp		eax, LOWER_LIMIT
 000000AC  7C 07			jl		outOfRange
					
 000000AE  A3 000001C4 R		mov		input, eax
 000000B3  EB 24			jmp		summation

 000000B5			outOfRange:
 000000B5  FF 0D 000001C0 R		dec		numInputs
 000000BB  BA 000001C8 R		mov		edx, OFFSET oOR_input
 000000C0  E8 00000000 E		call	WriteString
 000000C5  BA 000000F6 R		mov		edx, OFFSET instruction_1
 000000CA  E8 00000000 E		call	WriteString
 000000CF  E8 00000000 E		call	CrLf
 000000D4  E8 FFFFFFA4			call	getUserData

				;**** Calculations ****
 000000D9			summation:
					
 000000D9  A1 0000020C R		mov		eax, sum
 000000DE  03 05 000001C4 R		add		eax, input
 000000E4  A3 0000020C R		mov		sum, eax
 000000E9  EB 92			jmp		getUserData

 000000EB			average:
				; decrease numInputs because we didn't add one this time
 000000EB  FF 0D 000001C0 R		dec		numInputs
 000000F1  8B 15 00000214 R		mov		edx, rem
 000000F7  A1 0000020C R		mov		eax, sum
 000000FC  8B 1D 000001C0 R		mov		ebx, numInputs		
					
 00000102  83 FB 00			cmp		ebx, 0
 00000105  7E 6F			jle		emptyDisplay
					
					; need to convert double to quad
 00000107  99				cdq
 00000108  F7 FB			idiv	ebx
 0000010A  A3 00000210 R		mov		avg, eax
 0000010F  89 15 00000214 R		mov		rem, edx
 00000115  EB 00			jmp 	display

				;**** Print ****
 00000117			display:
				; Display number of valid numbers
 00000117  E8 00000000 E		call	CrLf
 0000011C  BA 0000017A R		mov		edx, OFFSET you_Entered
 00000121  E8 00000000 E		call	WriteString
 00000126  A1 000001C0 R		mov		eax, numInputs
 0000012B  E8 00000000 E		call 	WriteDec
 00000130  BA 00000187 R		mov		edx, OFFSET valid_Nums
 00000135  E8 00000000 E		call	WriteString
 0000013A  E8 00000000 E		call 	CrLf
					
				; Display sum
 0000013F  BA 000001E6 R		mov		edx, OFFSET the_Sum
 00000144  E8 00000000 E		call	WriteString
 00000149  A1 0000020C R		mov		eax, sum
 0000014E  E8 00000000 E		call	WriteInt
 00000153  E8 00000000 E		call	CrLf
					
				; Display avg
 00000158  BA 000001F3 R		mov		edx, OFFSET the_Avg
 0000015D  E8 00000000 E		call 	WriteString
 00000162  A1 00000210 R		mov 	eax, avg
 00000167  E8 00000000 E		call	WriteInt
 0000016C  E8 00000000 E		call 	CrLf
 00000171  E8 00000019			call	farewell
					
				; prints if the user is ending without entering any valid nums
 00000176			emptyDisplay:
 00000176  E8 00000000 E		call	CrLf
 0000017B  BA 00000197 R		mov		edx, OFFSET entered_Nothing
 00000180  E8 00000000 E		call	WriteString
 00000185  E8 00000000 E		call	CrLf
 0000018A  E8 00000000			call 	farewell

 0000018F			farewell:	
 0000018F  E8 00000000 E		call	CrLf
 00000194  BA 00000052 R		mov 	edx, OFFSET goodBye
 00000199  E8 00000000 E		call	WriteString
 0000019E  BA 00000091 R		mov		edx, OFFSET userName
 000001A3  E8 00000000 E		call	WriteString
 000001A8  E8 00000000 E		call	CrLf


					
					exit	; exit to operating system
 000001AD  6A 00	   *	    push   +000000000h
 000001AF  E8 00000000 E   *	    call   ExitProcess
 000001B4			main ENDP

				; (insert additional procedures here)

				END main
Microsoft (R) Macro Assembler Version 14.10.25017.0	    02/09/18 13:43:58
2Integer Accumulator     (IntAccu-TuckerLavell.asm	     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

CONST  . . . . . . . . . . . . .	32 Bit	 00000000 Para	  Public  'CONST'	 ReadOnly
FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000024B Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001B4 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000001B4 Public STDCALL
  introduction . . . . . . . . .	L Near	 00000000 _TEXT	
  userInstructions . . . . . . .	L Near	 0000005F _TEXT	
  getUserData  . . . . . . . . .	L Near	 0000007D _TEXT	
  inputValidation  . . . . . . .	L Near	 0000009E _TEXT	
  outOfRange . . . . . . . . . .	L Near	 000000B5 _TEXT	
  summation  . . . . . . . . . .	L Near	 000000D9 _TEXT	
  average  . . . . . . . . . . .	L Near	 000000EB _TEXT	
  display  . . . . . . . . . . .	L Near	 00000117 _TEXT	
  emptyDisplay . . . . . . . . .	L Near	 00000176 _TEXT	
  farewell . . . . . . . . . . .	L Near	 0000018F _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
EC1  . . . . . . . . . . . . . .	Byte	 00000220 _DATA	
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INPUT_BUFFER . . . . . . . . . .	Number	 00000064h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LIMIT  . . . . . . . . . . . . .	Number	 -00000064h   
LOWER_LIMIT  . . . . . . . . . .	DWord	 0000021C _DATA	
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
UPPER_LIMIT  . . . . . . . . . .	DWord	 00000218 _DATA	
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
ask_userName . . . . . . . . . .	Byte	 00000075 _DATA	
avg  . . . . . . . . . . . . . .	DWord	 00000210 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
enter_Num  . . . . . . . . . . .	Byte	 00000169 _DATA	
entered_Nothing  . . . . . . . .	Byte	 00000197 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodBye  . . . . . . . . . . . .	Byte	 00000052 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
hello  . . . . . . . . . . . . .	Byte	 00000089 _DATA	
input  . . . . . . . . . . . . .	DWord	 000001C4 _DATA	
instruction_1  . . . . . . . . .	Byte	 000000F6 _DATA	
instruction_2  . . . . . . . . .	Byte	 00000127 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
numInputs  . . . . . . . . . . .	DWord	 000001C0 _DATA	
oOR_input  . . . . . . . . . . .	Byte	 000001C8 _DATA	
prog_name  . . . . . . . . . . .	Byte	 00000000 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
rem  . . . . . . . . . . . . . .	DWord	 00000214 _DATA	
sum  . . . . . . . . . . . . . .	DWord	 0000020C _DATA	
thanks . . . . . . . . . . . . .	Byte	 00000026 _DATA	
the_Avg  . . . . . . . . . . . .	Byte	 000001F3 _DATA	
the_Sum  . . . . . . . . . . . .	Byte	 000001E6 _DATA	
userName . . . . . . . . . . . .	Byte	 00000091 _DATA	
valid_Nums . . . . . . . . . . .	Byte	 00000187 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
whoBy  . . . . . . . . . . . . .	Byte	 00000015 _DATA	
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   
you_Entered  . . . . . . . . . .	Byte	 0000017A _DATA	

	   0 Warnings
	   0 Errors
